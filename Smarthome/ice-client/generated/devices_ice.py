# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `devices.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module smarthome
_M_smarthome = Ice.openModule('smarthome')
__name__ = 'smarthome'

if 'Error' not in _M_smarthome.__dict__:
    _M_smarthome.Error = Ice.createTempClass()
    class Error(Ice.UserException):
        def __init__(self, errorCode=0, errorMessage=''):
            self.errorCode = errorCode
            self.errorMessage = errorMessage

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::smarthome::Error'

    _M_smarthome._t_Error = IcePy.defineException('::smarthome::Error', Error, (), False, None, (
        ('errorCode', (), IcePy._t_int, False, 0),
        ('errorMessage', (), IcePy._t_string, False, 0)
    ))
    Error._ice_type = _M_smarthome._t_Error

    _M_smarthome.Error = Error
    del Error

_M_smarthome.minVolume = 0

_M_smarthome.maxVolume = 10

if 'Type' not in _M_smarthome.__dict__:
    _M_smarthome.Type = Ice.createTempClass()
    class Type(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Type.PORTABLE = Type("PORTABLE", 0)
    Type.STATIONARY = Type("STATIONARY", 1)
    Type._enumerators = { 0:Type.PORTABLE, 1:Type.STATIONARY }

    _M_smarthome._t_Type = IcePy.defineEnum('::smarthome::Type', Type, (), Type._enumerators)

    _M_smarthome.Type = Type
    del Type

if 'Specs' not in _M_smarthome.__dict__:
    _M_smarthome.Specs = Ice.createTempClass()
    class Specs(object):
        def __init__(self, id=0, producentId='', name='', type=_M_smarthome.Type.PORTABLE, producer='', isBluetooth=False):
            self.id = id
            self.producentId = producentId
            self.name = name
            self.type = type
            self.producer = producer
            self.isBluetooth = isBluetooth

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.producentId)
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.type)
            _h = 5 * _h + Ice.getHash(self.producer)
            _h = 5 * _h + Ice.getHash(self.isBluetooth)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_smarthome.Specs):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.producentId is None or other.producentId is None:
                    if self.producentId != other.producentId:
                        return (-1 if self.producentId is None else 1)
                else:
                    if self.producentId < other.producentId:
                        return -1
                    elif self.producentId > other.producentId:
                        return 1
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.type is None or other.type is None:
                    if self.type != other.type:
                        return (-1 if self.type is None else 1)
                else:
                    if self.type < other.type:
                        return -1
                    elif self.type > other.type:
                        return 1
                if self.producer is None or other.producer is None:
                    if self.producer != other.producer:
                        return (-1 if self.producer is None else 1)
                else:
                    if self.producer < other.producer:
                        return -1
                    elif self.producer > other.producer:
                        return 1
                if self.isBluetooth is None or other.isBluetooth is None:
                    if self.isBluetooth != other.isBluetooth:
                        return (-1 if self.isBluetooth is None else 1)
                else:
                    if self.isBluetooth < other.isBluetooth:
                        return -1
                    elif self.isBluetooth > other.isBluetooth:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_Specs)

        __repr__ = __str__

    _M_smarthome._t_Specs = IcePy.defineStruct('::smarthome::Specs', Specs, (), (
        ('id', (), IcePy._t_int),
        ('producentId', (), IcePy._t_string),
        ('name', (), IcePy._t_string),
        ('type', (), _M_smarthome._t_Type),
        ('producer', (), IcePy._t_string),
        ('isBluetooth', (), IcePy._t_bool)
    ))

    _M_smarthome.Specs = Specs
    del Specs

_M_smarthome._t_Audio = IcePy.defineValue('::smarthome::Audio', Ice.Value, -1, (), False, True, None, ())

if 'AudioPrx' not in _M_smarthome.__dict__:
    _M_smarthome.AudioPrx = Ice.createTempClass()
    class AudioPrx(Ice.ObjectPrx):

        def getSpecs(self, context=None):
            return _M_smarthome.Audio._op_getSpecs.invoke(self, ((), context))

        def getSpecsAsync(self, context=None):
            return _M_smarthome.Audio._op_getSpecs.invokeAsync(self, ((), context))

        def begin_getSpecs(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Audio._op_getSpecs.begin(self, ((), _response, _ex, _sent, context))

        def end_getSpecs(self, _r):
            return _M_smarthome.Audio._op_getSpecs.end(self, _r)

        def getCurrentVolume(self, context=None):
            return _M_smarthome.Audio._op_getCurrentVolume.invoke(self, ((), context))

        def getCurrentVolumeAsync(self, context=None):
            return _M_smarthome.Audio._op_getCurrentVolume.invokeAsync(self, ((), context))

        def begin_getCurrentVolume(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Audio._op_getCurrentVolume.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentVolume(self, _r):
            return _M_smarthome.Audio._op_getCurrentVolume.end(self, _r)

        def turnUp(self, context=None):
            return _M_smarthome.Audio._op_turnUp.invoke(self, ((), context))

        def turnUpAsync(self, context=None):
            return _M_smarthome.Audio._op_turnUp.invokeAsync(self, ((), context))

        def begin_turnUp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Audio._op_turnUp.begin(self, ((), _response, _ex, _sent, context))

        def end_turnUp(self, _r):
            return _M_smarthome.Audio._op_turnUp.end(self, _r)

        def turnDown(self, context=None):
            return _M_smarthome.Audio._op_turnDown.invoke(self, ((), context))

        def turnDownAsync(self, context=None):
            return _M_smarthome.Audio._op_turnDown.invokeAsync(self, ((), context))

        def begin_turnDown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Audio._op_turnDown.begin(self, ((), _response, _ex, _sent, context))

        def end_turnDown(self, _r):
            return _M_smarthome.Audio._op_turnDown.end(self, _r)

        def turnOn(self, context=None):
            return _M_smarthome.Audio._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_smarthome.Audio._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Audio._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_smarthome.Audio._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_smarthome.Audio._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_smarthome.Audio._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Audio._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_smarthome.Audio._op_turnOff.end(self, _r)

        def startTrack(self, context=None):
            return _M_smarthome.Audio._op_startTrack.invoke(self, ((), context))

        def startTrackAsync(self, context=None):
            return _M_smarthome.Audio._op_startTrack.invokeAsync(self, ((), context))

        def begin_startTrack(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Audio._op_startTrack.begin(self, ((), _response, _ex, _sent, context))

        def end_startTrack(self, _r):
            return _M_smarthome.Audio._op_startTrack.end(self, _r)

        def getTrackName(self, context=None):
            return _M_smarthome.Audio._op_getTrackName.invoke(self, ((), context))

        def getTrackNameAsync(self, context=None):
            return _M_smarthome.Audio._op_getTrackName.invokeAsync(self, ((), context))

        def begin_getTrackName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Audio._op_getTrackName.begin(self, ((), _response, _ex, _sent, context))

        def end_getTrackName(self, _r):
            return _M_smarthome.Audio._op_getTrackName.end(self, _r)

        def stopTrack(self, context=None):
            return _M_smarthome.Audio._op_stopTrack.invoke(self, ((), context))

        def stopTrackAsync(self, context=None):
            return _M_smarthome.Audio._op_stopTrack.invokeAsync(self, ((), context))

        def begin_stopTrack(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Audio._op_stopTrack.begin(self, ((), _response, _ex, _sent, context))

        def end_stopTrack(self, _r):
            return _M_smarthome.Audio._op_stopTrack.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthome.AudioPrx.ice_checkedCast(proxy, '::smarthome::Audio', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthome.AudioPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthome::Audio'
    _M_smarthome._t_AudioPrx = IcePy.defineProxy('::smarthome::Audio', AudioPrx)

    _M_smarthome.AudioPrx = AudioPrx
    del AudioPrx

    _M_smarthome.Audio = Ice.createTempClass()
    class Audio(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthome::Audio')

        def ice_id(self, current=None):
            return '::smarthome::Audio'

        @staticmethod
        def ice_staticId():
            return '::smarthome::Audio'

        def getSpecs(self, current=None):
            raise NotImplementedError("servant method 'getSpecs' not implemented")

        def getCurrentVolume(self, current=None):
            raise NotImplementedError("servant method 'getCurrentVolume' not implemented")

        def turnUp(self, current=None):
            raise NotImplementedError("servant method 'turnUp' not implemented")

        def turnDown(self, current=None):
            raise NotImplementedError("servant method 'turnDown' not implemented")

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def startTrack(self, current=None):
            raise NotImplementedError("servant method 'startTrack' not implemented")

        def getTrackName(self, current=None):
            raise NotImplementedError("servant method 'getTrackName' not implemented")

        def stopTrack(self, current=None):
            raise NotImplementedError("servant method 'stopTrack' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_AudioDisp)

        __repr__ = __str__

    _M_smarthome._t_AudioDisp = IcePy.defineClass('::smarthome::Audio', Audio, (), None, ())
    Audio._ice_type = _M_smarthome._t_AudioDisp

    Audio._op_getSpecs = IcePy.Operation('getSpecs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_smarthome._t_Specs, False, 0), ())
    Audio._op_getCurrentVolume = IcePy.Operation('getCurrentVolume', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), (_M_smarthome._t_Error,))
    Audio._op_turnUp = IcePy.Operation('turnUp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_smarthome._t_Error,))
    Audio._op_turnDown = IcePy.Operation('turnDown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_smarthome._t_Error,))
    Audio._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Audio._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Audio._op_startTrack = IcePy.Operation('startTrack', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_smarthome._t_Error,))
    Audio._op_getTrackName = IcePy.Operation('getTrackName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), (_M_smarthome._t_Error,))
    Audio._op_stopTrack = IcePy.Operation('stopTrack', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_smarthome._t_Error,))

    _M_smarthome.Audio = Audio
    del Audio

_M_smarthome._t_Speaker = IcePy.defineValue('::smarthome::Speaker', Ice.Value, -1, (), False, True, None, ())

if 'SpeakerPrx' not in _M_smarthome.__dict__:
    _M_smarthome.SpeakerPrx = Ice.createTempClass()
    class SpeakerPrx(_M_smarthome.AudioPrx):

        def connectBluetooth(self, context=None):
            return _M_smarthome.Speaker._op_connectBluetooth.invoke(self, ((), context))

        def connectBluetoothAsync(self, context=None):
            return _M_smarthome.Speaker._op_connectBluetooth.invokeAsync(self, ((), context))

        def begin_connectBluetooth(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Speaker._op_connectBluetooth.begin(self, ((), _response, _ex, _sent, context))

        def end_connectBluetooth(self, _r):
            return _M_smarthome.Speaker._op_connectBluetooth.end(self, _r)

        def disconnectBluetooth(self, context=None):
            return _M_smarthome.Speaker._op_disconnectBluetooth.invoke(self, ((), context))

        def disconnectBluetoothAsync(self, context=None):
            return _M_smarthome.Speaker._op_disconnectBluetooth.invokeAsync(self, ((), context))

        def begin_disconnectBluetooth(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Speaker._op_disconnectBluetooth.begin(self, ((), _response, _ex, _sent, context))

        def end_disconnectBluetooth(self, _r):
            return _M_smarthome.Speaker._op_disconnectBluetooth.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthome.SpeakerPrx.ice_checkedCast(proxy, '::smarthome::Speaker', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthome.SpeakerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthome::Speaker'
    _M_smarthome._t_SpeakerPrx = IcePy.defineProxy('::smarthome::Speaker', SpeakerPrx)

    _M_smarthome.SpeakerPrx = SpeakerPrx
    del SpeakerPrx

    _M_smarthome.Speaker = Ice.createTempClass()
    class Speaker(_M_smarthome.Audio):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthome::Audio', '::smarthome::Speaker')

        def ice_id(self, current=None):
            return '::smarthome::Speaker'

        @staticmethod
        def ice_staticId():
            return '::smarthome::Speaker'

        def connectBluetooth(self, current=None):
            raise NotImplementedError("servant method 'connectBluetooth' not implemented")

        def disconnectBluetooth(self, current=None):
            raise NotImplementedError("servant method 'disconnectBluetooth' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_SpeakerDisp)

        __repr__ = __str__

    _M_smarthome._t_SpeakerDisp = IcePy.defineClass('::smarthome::Speaker', Speaker, (), None, (_M_smarthome._t_AudioDisp,))
    Speaker._ice_type = _M_smarthome._t_SpeakerDisp

    Speaker._op_connectBluetooth = IcePy.Operation('connectBluetooth', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Speaker._op_disconnectBluetooth = IcePy.Operation('disconnectBluetooth', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_smarthome.Speaker = Speaker
    del Speaker

_M_smarthome._t_Radio = IcePy.defineValue('::smarthome::Radio', Ice.Value, -1, (), False, True, None, ())

if 'RadioPrx' not in _M_smarthome.__dict__:
    _M_smarthome.RadioPrx = Ice.createTempClass()
    class RadioPrx(_M_smarthome.AudioPrx):

        def turnOnRadioMode(self, context=None):
            return _M_smarthome.Radio._op_turnOnRadioMode.invoke(self, ((), context))

        def turnOnRadioModeAsync(self, context=None):
            return _M_smarthome.Radio._op_turnOnRadioMode.invokeAsync(self, ((), context))

        def begin_turnOnRadioMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Radio._op_turnOnRadioMode.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOnRadioMode(self, _r):
            return _M_smarthome.Radio._op_turnOnRadioMode.end(self, _r)

        def turnOffRadioMode(self, context=None):
            return _M_smarthome.Radio._op_turnOffRadioMode.invoke(self, ((), context))

        def turnOffRadioModeAsync(self, context=None):
            return _M_smarthome.Radio._op_turnOffRadioMode.invokeAsync(self, ((), context))

        def begin_turnOffRadioMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Radio._op_turnOffRadioMode.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOffRadioMode(self, _r):
            return _M_smarthome.Radio._op_turnOffRadioMode.end(self, _r)

        def changeStation(self, context=None):
            return _M_smarthome.Radio._op_changeStation.invoke(self, ((), context))

        def changeStationAsync(self, context=None):
            return _M_smarthome.Radio._op_changeStation.invokeAsync(self, ((), context))

        def begin_changeStation(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.Radio._op_changeStation.begin(self, ((), _response, _ex, _sent, context))

        def end_changeStation(self, _r):
            return _M_smarthome.Radio._op_changeStation.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthome.RadioPrx.ice_checkedCast(proxy, '::smarthome::Radio', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthome.RadioPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthome::Radio'
    _M_smarthome._t_RadioPrx = IcePy.defineProxy('::smarthome::Radio', RadioPrx)

    _M_smarthome.RadioPrx = RadioPrx
    del RadioPrx

    _M_smarthome.Radio = Ice.createTempClass()
    class Radio(_M_smarthome.Audio):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthome::Audio', '::smarthome::Radio')

        def ice_id(self, current=None):
            return '::smarthome::Radio'

        @staticmethod
        def ice_staticId():
            return '::smarthome::Radio'

        def turnOnRadioMode(self, current=None):
            raise NotImplementedError("servant method 'turnOnRadioMode' not implemented")

        def turnOffRadioMode(self, current=None):
            raise NotImplementedError("servant method 'turnOffRadioMode' not implemented")

        def changeStation(self, current=None):
            raise NotImplementedError("servant method 'changeStation' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_RadioDisp)

        __repr__ = __str__

    _M_smarthome._t_RadioDisp = IcePy.defineClass('::smarthome::Radio', Radio, (), None, (_M_smarthome._t_AudioDisp,))
    Radio._ice_type = _M_smarthome._t_RadioDisp

    Radio._op_turnOnRadioMode = IcePy.Operation('turnOnRadioMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Radio._op_turnOffRadioMode = IcePy.Operation('turnOffRadioMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Radio._op_changeStation = IcePy.Operation('changeStation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_smarthome.Radio = Radio
    del Radio

if 'Location' not in _M_smarthome.__dict__:
    _M_smarthome.Location = Ice.createTempClass()
    class Location(object):
        def __init__(self, latitude=0.0, longitude=0.0):
            self.latitude = latitude
            self.longitude = longitude

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_smarthome.Location):
                return NotImplemented
            else:
                if self.latitude != other.latitude:
                    return False
                if self.longitude != other.longitude:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_Location)

        __repr__ = __str__

    _M_smarthome._t_Location = IcePy.defineStruct('::smarthome::Location', Location, (), (
        ('latitude', (), IcePy._t_double),
        ('longitude', (), IcePy._t_double)
    ))

    _M_smarthome.Location = Location
    del Location

if '_t_WeeklyInsideTemperatures' not in _M_smarthome.__dict__:
    _M_smarthome._t_WeeklyInsideTemperatures = IcePy.defineSequence('::smarthome::WeeklyInsideTemperatures', (), IcePy._t_double)

if '_t_WeeklyOutsideTemperatures' not in _M_smarthome.__dict__:
    _M_smarthome._t_WeeklyOutsideTemperatures = IcePy.defineSequence('::smarthome::WeeklyOutsideTemperatures', (), IcePy._t_double)

_M_smarthome._t_WeatherStation = IcePy.defineValue('::smarthome::WeatherStation', Ice.Value, -1, (), False, True, None, ())

if 'WeatherStationPrx' not in _M_smarthome.__dict__:
    _M_smarthome.WeatherStationPrx = Ice.createTempClass()
    class WeatherStationPrx(Ice.ObjectPrx):

        def getSpecs(self, context=None):
            return _M_smarthome.WeatherStation._op_getSpecs.invoke(self, ((), context))

        def getSpecsAsync(self, context=None):
            return _M_smarthome.WeatherStation._op_getSpecs.invokeAsync(self, ((), context))

        def begin_getSpecs(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.WeatherStation._op_getSpecs.begin(self, ((), _response, _ex, _sent, context))

        def end_getSpecs(self, _r):
            return _M_smarthome.WeatherStation._op_getSpecs.end(self, _r)

        def getLocation(self, context=None):
            return _M_smarthome.WeatherStation._op_getLocation.invoke(self, ((), context))

        def getLocationAsync(self, context=None):
            return _M_smarthome.WeatherStation._op_getLocation.invokeAsync(self, ((), context))

        def begin_getLocation(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.WeatherStation._op_getLocation.begin(self, ((), _response, _ex, _sent, context))

        def end_getLocation(self, _r):
            return _M_smarthome.WeatherStation._op_getLocation.end(self, _r)

        def getAverageWeeklyInsideTemperature(self, context=None):
            return _M_smarthome.WeatherStation._op_getAverageWeeklyInsideTemperature.invoke(self, ((), context))

        def getAverageWeeklyInsideTemperatureAsync(self, context=None):
            return _M_smarthome.WeatherStation._op_getAverageWeeklyInsideTemperature.invokeAsync(self, ((), context))

        def begin_getAverageWeeklyInsideTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.WeatherStation._op_getAverageWeeklyInsideTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getAverageWeeklyInsideTemperature(self, _r):
            return _M_smarthome.WeatherStation._op_getAverageWeeklyInsideTemperature.end(self, _r)

        def getAverageWeeklyOutsideTemperature(self, context=None):
            return _M_smarthome.WeatherStation._op_getAverageWeeklyOutsideTemperature.invoke(self, ((), context))

        def getAverageWeeklyOutsideTemperatureAsync(self, context=None):
            return _M_smarthome.WeatherStation._op_getAverageWeeklyOutsideTemperature.invokeAsync(self, ((), context))

        def begin_getAverageWeeklyOutsideTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.WeatherStation._op_getAverageWeeklyOutsideTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getAverageWeeklyOutsideTemperature(self, _r):
            return _M_smarthome.WeatherStation._op_getAverageWeeklyOutsideTemperature.end(self, _r)

        def getInsideTemperature(self, context=None):
            return _M_smarthome.WeatherStation._op_getInsideTemperature.invoke(self, ((), context))

        def getInsideTemperatureAsync(self, context=None):
            return _M_smarthome.WeatherStation._op_getInsideTemperature.invokeAsync(self, ((), context))

        def begin_getInsideTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.WeatherStation._op_getInsideTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getInsideTemperature(self, _r):
            return _M_smarthome.WeatherStation._op_getInsideTemperature.end(self, _r)

        def getOutsideTemperature(self, context=None):
            return _M_smarthome.WeatherStation._op_getOutsideTemperature.invoke(self, ((), context))

        def getOutsideTemperatureAsync(self, context=None):
            return _M_smarthome.WeatherStation._op_getOutsideTemperature.invokeAsync(self, ((), context))

        def begin_getOutsideTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.WeatherStation._op_getOutsideTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getOutsideTemperature(self, _r):
            return _M_smarthome.WeatherStation._op_getOutsideTemperature.end(self, _r)

        def getPressure(self, context=None):
            return _M_smarthome.WeatherStation._op_getPressure.invoke(self, ((), context))

        def getPressureAsync(self, context=None):
            return _M_smarthome.WeatherStation._op_getPressure.invokeAsync(self, ((), context))

        def begin_getPressure(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.WeatherStation._op_getPressure.begin(self, ((), _response, _ex, _sent, context))

        def end_getPressure(self, _r):
            return _M_smarthome.WeatherStation._op_getPressure.end(self, _r)

        def getHumidity(self, context=None):
            return _M_smarthome.WeatherStation._op_getHumidity.invoke(self, ((), context))

        def getHumidityAsync(self, context=None):
            return _M_smarthome.WeatherStation._op_getHumidity.invokeAsync(self, ((), context))

        def begin_getHumidity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.WeatherStation._op_getHumidity.begin(self, ((), _response, _ex, _sent, context))

        def end_getHumidity(self, _r):
            return _M_smarthome.WeatherStation._op_getHumidity.end(self, _r)

        def getWindSpeed(self, context=None):
            return _M_smarthome.WeatherStation._op_getWindSpeed.invoke(self, ((), context))

        def getWindSpeedAsync(self, context=None):
            return _M_smarthome.WeatherStation._op_getWindSpeed.invokeAsync(self, ((), context))

        def begin_getWindSpeed(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_smarthome.WeatherStation._op_getWindSpeed.begin(self, ((), _response, _ex, _sent, context))

        def end_getWindSpeed(self, _r):
            return _M_smarthome.WeatherStation._op_getWindSpeed.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_smarthome.WeatherStationPrx.ice_checkedCast(proxy, '::smarthome::WeatherStation', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_smarthome.WeatherStationPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::smarthome::WeatherStation'
    _M_smarthome._t_WeatherStationPrx = IcePy.defineProxy('::smarthome::WeatherStation', WeatherStationPrx)

    _M_smarthome.WeatherStationPrx = WeatherStationPrx
    del WeatherStationPrx

    _M_smarthome.WeatherStation = Ice.createTempClass()
    class WeatherStation(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::smarthome::WeatherStation')

        def ice_id(self, current=None):
            return '::smarthome::WeatherStation'

        @staticmethod
        def ice_staticId():
            return '::smarthome::WeatherStation'

        def getSpecs(self, current=None):
            raise NotImplementedError("servant method 'getSpecs' not implemented")

        def getLocation(self, current=None):
            raise NotImplementedError("servant method 'getLocation' not implemented")

        def getAverageWeeklyInsideTemperature(self, current=None):
            raise NotImplementedError("servant method 'getAverageWeeklyInsideTemperature' not implemented")

        def getAverageWeeklyOutsideTemperature(self, current=None):
            raise NotImplementedError("servant method 'getAverageWeeklyOutsideTemperature' not implemented")

        def getInsideTemperature(self, current=None):
            raise NotImplementedError("servant method 'getInsideTemperature' not implemented")

        def getOutsideTemperature(self, current=None):
            raise NotImplementedError("servant method 'getOutsideTemperature' not implemented")

        def getPressure(self, current=None):
            raise NotImplementedError("servant method 'getPressure' not implemented")

        def getHumidity(self, current=None):
            raise NotImplementedError("servant method 'getHumidity' not implemented")

        def getWindSpeed(self, current=None):
            raise NotImplementedError("servant method 'getWindSpeed' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_smarthome._t_WeatherStationDisp)

        __repr__ = __str__

    _M_smarthome._t_WeatherStationDisp = IcePy.defineClass('::smarthome::WeatherStation', WeatherStation, (), None, ())
    WeatherStation._ice_type = _M_smarthome._t_WeatherStationDisp

    WeatherStation._op_getSpecs = IcePy.Operation('getSpecs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_smarthome._t_Specs, False, 0), ())
    WeatherStation._op_getLocation = IcePy.Operation('getLocation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_smarthome._t_Location, False, 0), ())
    WeatherStation._op_getAverageWeeklyInsideTemperature = IcePy.Operation('getAverageWeeklyInsideTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    WeatherStation._op_getAverageWeeklyOutsideTemperature = IcePy.Operation('getAverageWeeklyOutsideTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    WeatherStation._op_getInsideTemperature = IcePy.Operation('getInsideTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    WeatherStation._op_getOutsideTemperature = IcePy.Operation('getOutsideTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    WeatherStation._op_getPressure = IcePy.Operation('getPressure', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    WeatherStation._op_getHumidity = IcePy.Operation('getHumidity', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())
    WeatherStation._op_getWindSpeed = IcePy.Operation('getWindSpeed', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_double, False, 0), ())

    _M_smarthome.WeatherStation = WeatherStation
    del WeatherStation

# End of module smarthome
